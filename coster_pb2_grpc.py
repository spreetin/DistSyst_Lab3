# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import coster_pb2 as coster__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coster_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WagonStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Board = channel.unary_unary(
                '/Wagon/Board',
                request_serializer=coster__pb2.Boarding.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)
        self.Depart = channel.unary_unary(
                '/Wagon/Depart',
                request_serializer=coster__pb2.Departure.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)


class WagonServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Board(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Depart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WagonServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Board': grpc.unary_unary_rpc_method_handler(
                    servicer.Board,
                    request_deserializer=coster__pb2.Boarding.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
            'Depart': grpc.unary_unary_rpc_method_handler(
                    servicer.Depart,
                    request_deserializer=coster__pb2.Departure.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Wagon', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Wagon', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Wagon(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Board(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Wagon/Board',
            coster__pb2.Boarding.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Depart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Wagon/Depart',
            coster__pb2.Departure.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RollerCoasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/RollerCoaster/Subscribe',
                request_serializer=coster__pb2.Subscription.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)
        self.Unsubscribe = channel.unary_unary(
                '/RollerCoaster/Unsubscribe',
                request_serializer=coster__pb2.Subscription.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)
        self.Notify = channel.unary_unary(
                '/RollerCoaster/Notify',
                request_serializer=coster__pb2.Notification.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)
        self.Disembark = channel.unary_unary(
                '/RollerCoaster/Disembark',
                request_serializer=coster__pb2.Disembark_.SerializeToString,
                response_deserializer=coster__pb2.Ack.FromString,
                _registered_method=True)


class RollerCoasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disembark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RollerCoasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=coster__pb2.Subscription.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=coster__pb2.Subscription.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=coster__pb2.Notification.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
            'Disembark': grpc.unary_unary_rpc_method_handler(
                    servicer.Disembark,
                    request_deserializer=coster__pb2.Disembark_.FromString,
                    response_serializer=coster__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RollerCoaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RollerCoaster', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RollerCoaster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RollerCoaster/Subscribe',
            coster__pb2.Subscription.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RollerCoaster/Unsubscribe',
            coster__pb2.Subscription.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RollerCoaster/Notify',
            coster__pb2.Notification.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disembark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RollerCoaster/Disembark',
            coster__pb2.Disembark_.SerializeToString,
            coster__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
